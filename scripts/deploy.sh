#!/bin/bash

# ============================================================================
# Script para deploy em produ√ß√£o
# ============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
ENVIRONMENT=${1:-production}
VERSION=${2:-latest}

echo -e "${BLUE}üöÄ Iniciando deploy para ${ENVIRONMENT}...${NC}"

# Fun√ß√£o para validar ambiente
validate_environment() {
    echo -e "${YELLOW}üîç Validando ambiente...${NC}"
    
    # Verificar se arquivos necess√°rios existem
    if [ ! -f "docker-compose.prod.yml" ]; then
        echo -e "${RED}‚ùå Arquivo docker-compose.prod.yml n√£o encontrado!${NC}"
        exit 1
    fi
    
    if [ ! -f ".env.production" ]; then
        echo -e "${RED}‚ùå Arquivo .env.production n√£o encontrado!${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Ambiente validado!${NC}"
}

# Fun√ß√£o para executar testes
run_tests() {
    echo -e "${YELLOW}üß™ Executando testes...${NC}"
    
    # Executar suite completa de testes
    ./scripts/run-tests.sh
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Testes falharam! Deploy abortado.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Todos os testes passaram!${NC}"
}

# Fun√ß√£o para criar backup
create_backup() {
    if [ "$ENVIRONMENT" = "production" ]; then
        echo -e "${YELLOW}üóÑÔ∏è Criando backup antes do deploy...${NC}"
        ./scripts/backup-db.sh
        echo -e "${GREEN}‚úÖ Backup criado!${NC}"
    fi
}

# Fun√ß√£o para build das imagens
build_images() {
    echo -e "${YELLOW}üèóÔ∏è Construindo imagens Docker...${NC}"
    
    # Tag com vers√£o
    docker-compose -f docker-compose.prod.yml build
    
    # Tagear imagens com vers√£o
    docker tag sistemamovemarias_backend:latest sistemamovemarias_backend:$VERSION
    docker tag sistemamovemarias_frontend:latest sistemamovemarias_frontend:$VERSION
    
    echo -e "${GREEN}‚úÖ Imagens constru√≠das!${NC}"
}

# Fun√ß√£o para fazer deploy
deploy() {
    echo -e "${YELLOW}üö¢ Fazendo deploy...${NC}"
    
    # Copiar arquivo de ambiente
    cp .env.production .env
    
    # Parar servi√ßos atuais (se existirem)
    docker-compose -f docker-compose.prod.yml down --remove-orphans || true
    
    # Iniciar novos servi√ßos
    docker-compose -f docker-compose.prod.yml up -d
    
    # Aguardar servi√ßos ficarem prontos
    echo -e "${YELLOW}‚è≥ Aguardando servi√ßos ficarem prontos...${NC}"
    sleep 30
    
    # Executar migra√ß√µes
    docker-compose -f docker-compose.prod.yml exec backend flask db upgrade
    
    echo -e "${GREEN}‚úÖ Deploy conclu√≠do!${NC}"
}

# Fun√ß√£o para verificar health
check_health() {
    echo -e "${YELLOW}üîç Verificando sa√∫de da aplica√ß√£o...${NC}"
    
    # Verificar backend
    for i in {1..10}; do
        if curl -f http://localhost:5000/health > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Backend est√° saud√°vel!${NC}"
            break
        fi
        echo "Tentativa $i/10 - Aguardando backend..."
        sleep 10
    done
    
    # Verificar frontend
    for i in {1..10}; do
        if curl -f http://localhost:80 > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Frontend est√° saud√°vel!${NC}"
            break
        fi
        echo "Tentativa $i/10 - Aguardando frontend..."
        sleep 10
    done
    
    echo -e "${GREEN}‚úÖ Aplica√ß√£o est√° funcionando!${NC}"
}

# Fun√ß√£o para rollback
rollback() {
    echo -e "${YELLOW}üîÑ Fazendo rollback...${NC}"
    
    if [ -z "$2" ]; then
        echo -e "${RED}‚ùå Vers√£o para rollback n√£o especificada!${NC}"
        echo "Uso: $0 rollback <vers√£o>"
        exit 1
    fi
    
    ROLLBACK_VERSION=$2
    
    # Parar servi√ßos atuais
    docker-compose -f docker-compose.prod.yml down
    
    # Usar vers√£o anterior
    docker tag sistemamovemarias_backend:$ROLLBACK_VERSION sistemamovemarias_backend:latest
    docker tag sistemamovemarias_frontend:$ROLLBACK_VERSION sistemamovemarias_frontend:latest
    
    # Subir com vers√£o anterior
    docker-compose -f docker-compose.prod.yml up -d
    
    echo -e "${GREEN}‚úÖ Rollback para vers√£o $ROLLBACK_VERSION conclu√≠do!${NC}"
}

# Fun√ß√£o principal
main() {
    case "$1" in
        production|staging)
            validate_environment
            run_tests
            create_backup
            build_images
            deploy
            check_health
            echo -e "\n${GREEN}üéâ Deploy para $ENVIRONMENT conclu√≠do com sucesso!${NC}"
            ;;
        rollback)
            rollback "$@"
            ;;
        *)
            echo "‚ùå Uso: $0 <production|staging> [vers√£o]"
            echo "   ou: $0 rollback <vers√£o>"
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"
